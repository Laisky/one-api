package aws

import (
	relaymodel "github.com/songquanpeng/one-api/relay/model"
)

// Request represents a chat completion request to AWS Bedrock Cohere Command R models.
//
// This structure defines all the parameters needed to send a chat completion
// request to the Cohere Command R family models via AWS Bedrock. Cohere Command R
// is designed for enterprise-grade conversations with advanced multi-lingual support,
// safety filtering, and coherent long-form dialogue capabilities.
// Supports both basic conversation and advanced tool calling capabilities.
//
// Based on AWS Bedrock Cohere Command R documentation.
type Request struct {
	// Messages contains the conversation history including system, user, and assistant messages.
	// This field is required and must contain at least one message.
	// Cohere Command R processes these messages to generate contextually aware, enterprise-grade responses.
	// Now supports tool calls and tool results for advanced functionality.
	Messages []Message `json:"messages"`

	// MaxTokens specifies the maximum number of tokens to generate in the response.
	// Optional field that helps control response length and API costs.
	// Cohere Command R uses this to limit generation while maintaining coherent responses.
	MaxTokens int `json:"max_tokens,omitempty"`

	// Temperature controls the randomness of the model's responses.
	// Range: 0.0 to 1.0, where 0.0 is deterministic and 1.0 is most random.
	// Optional field, uses model default if not specified.
	// Cohere Command R maintains coherence even at higher temperature values.
	Temperature *float64 `json:"temperature,omitempty"`

	// TopP controls nucleus sampling, limiting the cumulative probability of token choices.
	// Range: 0.0 to 1.0, where lower values make responses more focused.
	// Optional field, uses model default if not specified.
	// Optimized for Cohere's enterprise conversation quality.
	TopP *float64 `json:"top_p,omitempty"`

	// Stop contains custom strings that will stop generation when encountered.
	// Optional field that allows fine-grained control over response termination.
	// Useful for controlling when Cohere Command R stops generating in specific contexts.
	Stop []string `json:"stop,omitempty"`

	// Tools contains the available tool definitions for the model to use.
	// Optional field that enables function calling capabilities.
	// When provided, Cohere Command R can invoke these tools during conversation.
	Tools []CohereTool `json:"tools,omitempty"`

	// ToolChoice controls how the model decides to use tools.
	// Can be "auto" (model decides), "any" (must use a tool), or specify a particular tool.
	// Optional field that provides fine-grained control over tool invocation behavior.
	ToolChoice any `json:"tool_choice,omitempty"`
}

// Message represents a single message in the conversation history.
//
// Messages form the core of the chat completion request, containing the back-and-forth
// conversation between different participants. Each message has a specific role that
// determines its purpose and expected content format for Cohere Command R processing.
// Supports both basic conversation and advanced tool calling capabilities.
type Message struct {
	// Role identifies the sender of the message.
	// Valid values: "system" (instructions to guide model behavior),
	// "user" (human input), "assistant" (model response with enterprise-grade quality).
	// Cohere Command R uses role information to maintain conversation context and quality.
	Role string `json:"role"`

	// Content contains the text content of the message.
	// Required for system and user messages. For assistant messages, this contains
	// the model's response with Cohere's enterprise-grade conversation quality.
	// Supports multi-lingual content with Cohere's advanced language understanding.
	Content string `json:"content,omitempty"`

	// ToolCalls contains tool invocations made by the assistant.
	// Present in assistant messages when the model decides to call tools.
	// Each tool call includes function name, arguments, and unique identifier.
	ToolCalls []CohereToolCall `json:"tool_calls,omitempty"`

	// ToolCallID identifies which tool call this message responds to.
	// Present in user messages that contain tool execution results.
	// Links tool results back to the original assistant tool call.
	ToolCallID string `json:"tool_call_id,omitempty"`
}

// Response represents the complete response from AWS Bedrock Cohere Command R models.
//
// This structure contains the model's response to a chat completion request,
// including generated text with Cohere's enterprise-grade conversation quality.
// Cohere Command R responses feature coherent, contextually appropriate content
// with advanced multi-lingual support and safety filtering applied.
//
// Based on AWS Bedrock Cohere Command R documentation.
type Response struct {
	// Choices contains the possible response options generated by the model.
	// Typically contains a single choice, but the array format maintains
	// compatibility with OpenAI's API structure. Each choice represents
	// enterprise-quality content from Cohere Command R.
	Choices []Choice `json:"choices"`
}

// Choice represents a single response option from the Cohere Command R model.
//
// Each choice contains the generated content along with metadata about
// why the generation stopped. Cohere Command R choices feature enterprise-grade
// conversation quality with coherent, contextually appropriate responses
// and advanced safety filtering results.
type Choice struct {
	// Index identifies the position of this choice in the choices array.
	// Typically 0 for the first (and usually only) choice.
	Index int `json:"index"`

	// Message contains the actual response content from the assistant.
	// This includes Cohere Command R's enterprise-grade conversation response
	// with multi-lingual support and safety filtering applied.
	Message ResponseMessage `json:"message"`

	// StopReason indicates why the model stopped generating tokens.
	// Valid values: "stop" (natural completion), "length" (max tokens reached),
	// "end_turn" (model decided to end), "max_tokens" (token limit reached).
	// May also include Cohere-specific safety filtering stop reasons.
	StopReason string `json:"stop_reason"`
}

// ResponseMessage represents the assistant's message in the response.
//
// This structure contains the model's generated content with Cohere Command R's
// enterprise-grade conversation quality. The response includes advanced contextual
// understanding, multi-lingual support, and safety filtering results.
// The role is always "assistant" for response messages.
type ResponseMessage struct {
	// Role identifies the message sender, always "assistant" for responses.
	// This maintains consistency with the conversation message format
	// and indicates enterprise-grade Cohere Command R generated content.
	Role string `json:"role"`

	// Content contains the generated text response from the model.
	// This is Cohere Command R's enterprise-quality conversation response
	// with advanced contextual understanding, coherent dialogue flow,
	// multi-lingual support, and safety filtering applied.
	Content string `json:"content,omitempty"`
}

// StreamResponse represents a streaming response chunk from AWS Bedrock Cohere Command R models.
//
// This structure contains the streaming response data when using server-sent events
// for real-time chat completion. Each chunk represents incremental content delivery
// from Cohere Command R, allowing for progressive response rendering with
// enterprise-grade conversation quality maintained throughout the stream.
//
// Based on AWS Bedrock Cohere Command R streaming documentation.
type StreamResponse struct {
	// Choices contains the streaming response options generated by the model.
	// Similar to non-streaming responses, this typically contains a single choice
	// but maintains array format for API compatibility. Each choice represents
	// incremental enterprise-quality content from Cohere Command R.
	Choices []StreamChoice `json:"choices"`
}

// StreamChoice represents a single streaming response option from the Cohere Command R model.
//
// Each streaming choice contains incremental content (delta) along with metadata
// about the current state of generation. Cohere Command R streaming choices
// deliver enterprise-grade conversation quality progressively, maintaining
// coherent dialogue flow and contextual appropriateness throughout the stream.
type StreamChoice struct {
	// Index identifies the position of this choice in the choices array.
	// Typically 0 for the first (and usually only) streaming choice.
	Index int `json:"index"`

	// Delta contains the incremental content generated by the model.
	// This represents the new tokens added in this streaming chunk,
	// featuring Cohere Command R's enterprise-grade conversation quality
	// with progressive content delivery and coherent dialogue flow.
	Delta StreamResponseMessage `json:"delta"`

	// StopReason indicates why the model stopped generating tokens, if applicable.
	// Valid values: "stop" (natural completion), "length" (max tokens reached),
	// "end_turn" (model decided to end), "max_tokens" (token limit reached).
	// Empty during active streaming, populated only when generation completes.
	StopReason string `json:"stop_reason,omitempty"`
}

// StreamResponseMessage represents the incremental delta message in a streaming response.
//
// This structure contains the progressive content generated by Cohere Command R
// during streaming responses. Each delta represents new tokens added to the
// conversation, maintaining enterprise-grade quality with advanced contextual
// understanding, multi-lingual support, and safety filtering applied progressively.
type StreamResponseMessage struct {
	// Role identifies the message sender for the delta content.
	// Typically "assistant" for streaming responses, indicating
	// enterprise-grade Cohere Command R generated content.
	Role string `json:"role,omitempty"`

	// Content contains the incremental text generated in this streaming chunk.
	// This represents new tokens from Cohere Command R's enterprise-quality
	// conversation response with progressive delivery of coherent dialogue,
	// contextual understanding, and multi-lingual support.
	Content string `json:"content,omitempty"`
}

// CohereConverseStreamResponse represents a streaming response from AWS Bedrock Cohere Converse API.
//
// This structure handles streaming responses from Cohere Command R models through
// the AWS Bedrock Converse API. It provides different event types during the
// streaming process, including message initiation, content deltas, completion,
// and usage metadata. Each streaming event delivers enterprise-grade content
// with Cohere's advanced conversation quality and safety filtering.
//
// Based on AWS Bedrock Converse API streaming documentation.
type CohereConverseStreamResponse struct {
	// MessageStart indicates the beginning of a new message generation.
	// Contains role information for the assistant response from Cohere Command R.
	// Present only at the start of streaming to establish message context.
	MessageStart *CohereMessageStart `json:"messageStart,omitempty"`

	// ContentBlockDelta contains incremental content generated during streaming.
	// Provides progressive text delivery from Cohere Command R with enterprise-grade
	// conversation quality, maintaining coherent dialogue flow throughout the stream.
	ContentBlockDelta *CohereContentBlockDelta `json:"contentBlockDelta,omitempty"`

	// MessageStop indicates the completion of message generation.
	// Contains information about why generation stopped, providing insight into
	// Cohere Command R's completion logic and any safety filtering results.
	MessageStop *CohereMessageStop `json:"messageStop,omitempty"`

	// Metadata provides usage information and statistics for the streaming session.
	// Includes token counts for cost tracking and performance monitoring of
	// Cohere Command R enterprise conversations.
	Metadata *CohereStreamMetadata `json:"metadata,omitempty"`
}

// CohereMessageStart represents the initiation event for streaming message generation.
//
// This structure signals the beginning of a new response from Cohere Command R
// through the AWS Bedrock Converse API. It establishes the role context for
// the streaming content that follows, ensuring proper conversation flow and
// enterprise-grade response quality from the start.
type CohereMessageStart struct {
	// Role identifies the message sender, typically "assistant" for Cohere Command R responses.
	// This establishes the context for enterprise-grade content generation
	// and maintains conversation consistency throughout the streaming process.
	Role string `json:"role"`
}

// CohereContentBlockDelta represents incremental content delivery during streaming.
//
// This structure contains the progressive content generated by Cohere Command R
// during streaming responses through the AWS Bedrock Converse API. Each delta
// provides new text tokens with enterprise-grade conversation quality,
// maintaining coherent dialogue flow and contextual appropriateness.
type CohereContentBlockDelta struct {
	// Delta contains the incremental text content generated in this streaming chunk.
	// Features Cohere Command R's enterprise-quality conversation generation
	// with progressive delivery, advanced contextual understanding, and safety filtering.
	Delta CohereContentDelta `json:"delta"`
}

// CohereContentDelta represents the actual text content in a streaming delta.
//
// This structure contains the incremental text tokens generated by Cohere Command R
// during streaming responses. Each delta represents new content added to the
// conversation with enterprise-grade quality, featuring advanced multi-lingual
// support, contextual coherence, and safety filtering applied progressively.
type CohereContentDelta struct {
	// Text contains the incremental text generated in this streaming chunk.
	// This represents new tokens from Cohere Command R's enterprise-quality
	// conversation response with progressive delivery of coherent dialogue,
	// contextual understanding, and multi-lingual support.
	Text string `json:"text,omitempty"`
}

// CohereMessageStop represents the completion event for streaming message generation.
//
// This structure signals the end of content generation from Cohere Command R
// through the AWS Bedrock Converse API. It provides information about why
// generation completed, offering insight into the model's decision-making
// process and any enterprise-grade safety filtering that may have occurred.
type CohereMessageStop struct {
	// StopReason indicates why the model stopped generating tokens.
	// Valid values include "end_turn" (natural completion), "max_tokens" (token limit),
	// "stop_sequence" (custom stop sequence encountered), and other Cohere-specific
	// reasons including enterprise-grade safety filtering outcomes.
	StopReason string `json:"stopReason"`
}

// CohereStreamMetadata represents usage statistics and metadata for streaming responses.
//
// This structure provides comprehensive usage information for Cohere Command R
// streaming sessions through the AWS Bedrock Converse API. It includes token
// consumption data essential for cost tracking, performance monitoring, and
// enterprise usage analytics of Cohere's advanced conversation capabilities.
type CohereStreamMetadata struct {
	// Usage contains detailed token consumption statistics for the streaming session.
	// Provides input, output, and total token counts for accurate cost calculation
	// and performance monitoring of Cohere Command R enterprise conversations.
	Usage CohereUsage `json:"usage"`
}

// CohereUsage represents detailed token usage statistics for Cohere Command R requests.
//
// This structure provides comprehensive token consumption data for both streaming
// and non-streaming requests to Cohere Command R models through AWS Bedrock.
// Token tracking is essential for cost management, performance optimization,
// and enterprise usage analytics of Cohere's advanced conversation capabilities.
type CohereUsage struct {
	// InputTokens represents the number of tokens consumed from the input prompt.
	// Includes all tokens from system messages, user messages, and conversation history
	// processed by Cohere Command R for contextual understanding.
	InputTokens int `json:"inputTokens"`

	// OutputTokens represents the number of tokens generated in the response.
	// Includes all tokens produced by Cohere Command R in the assistant response
	// with enterprise-grade conversation quality and safety filtering applied.
	OutputTokens int `json:"outputTokens"`

	// TotalTokens represents the sum of input and output tokens for the request.
	// Provides the complete token consumption for cost calculation and usage
	// monitoring of Cohere Command R enterprise conversation sessions.
	TotalTokens int `json:"totalTokens"`
}

// CohereConverseMessage represents a message in the AWS Bedrock Converse API format.
//
// This structure defines individual messages within conversations for Cohere Command R
// models through the AWS Bedrock Converse API. Each message contains role information
// and content blocks, supporting rich text communication with enterprise-grade
// conversation quality, multi-lingual support, and advanced contextual understanding.
//
// Based on AWS Bedrock Converse API message format documentation.
type CohereConverseMessage struct {
	// Role identifies the sender of the message in the conversation.
	// Valid values: "user" (human input), "assistant" (Cohere Command R response),
	// "system" (instructions). Maintains conversation context for enterprise-grade
	// dialogue flow and coherent multi-turn interactions.
	Role string `json:"role"`

	// Content contains the message content as an array of content blocks.
	// Supports structured content delivery for Cohere Command R processing,
	// enabling rich text communication with advanced contextual understanding
	// and enterprise-grade conversation quality.
	Content []CohereConverseContentBlock `json:"content"`
}

// CohereConverseContentBlock represents a content block within a Converse API message.
//
// This structure contains individual content elements that make up a message
// for Cohere Command R models through the AWS Bedrock Converse API. Content blocks
// enable structured text delivery with enterprise-grade processing, supporting
// advanced multi-lingual capabilities and contextual understanding.
type CohereConverseContentBlock struct {
	// Text contains the textual content of this block.
	// Supports rich text input for Cohere Command R processing with enterprise-grade
	// conversation quality, advanced contextual understanding, multi-lingual support,
	// and coherent dialogue generation capabilities.
	Text string `json:"text,omitempty"`
}

// CohereConverseSystemMessage represents system instructions for the Converse API.
//
// This structure defines system-level instructions that guide Cohere Command R's
// behavior and response generation through the AWS Bedrock Converse API. System
// messages establish context, tone, and operational parameters for enterprise-grade
// conversations with advanced safety filtering and coherent dialogue flow.
type CohereConverseSystemMessage struct {
	// Text contains the system instruction content.
	// Provides behavioral guidance for Cohere Command R enterprise conversations,
	// establishing context, tone, safety parameters, and response characteristics
	// for coherent, contextually appropriate, multi-lingual dialogue generation.
	Text string `json:"text"`
}

// CohereConverseInferenceConfig represents inference parameters for the Converse API.
//
// This structure defines generation parameters that control Cohere Command R's
// response characteristics through the AWS Bedrock Converse API. These parameters
// enable fine-tuned control over enterprise-grade conversation generation,
// balancing creativity, coherence, and safety for optimal dialogue quality.
//
// Based on AWS Bedrock Converse API inference configuration documentation.
type CohereConverseInferenceConfig struct {
	// MaxTokens specifies the maximum number of tokens to generate in the response.
	// Controls response length and API costs while maintaining Cohere Command R's
	// enterprise-grade conversation quality and coherent dialogue completion.
	MaxTokens int `json:"maxTokens"`

	// Temperature controls the randomness of Cohere Command R's responses.
	// Range: 0.0 to 1.0, where 0.0 is deterministic and 1.0 is most random.
	// Optional field that balances creativity with consistency in enterprise conversations.
	Temperature *float64 `json:"temperature,omitempty"`

	// TopP controls nucleus sampling, limiting cumulative probability of token choices.
	// Range: 0.0 to 1.0, where lower values make responses more focused.
	// Optional field optimized for Cohere's enterprise conversation quality and coherence.
	TopP *float64 `json:"topP,omitempty"`

	// StopSequences contains custom strings that will stop generation when encountered.
	// Optional field enabling fine-grained control over Cohere Command R response
	// termination for enterprise conversation management and dialogue flow control.
	StopSequences []string `json:"stopSequences,omitempty"`
}

// CohereConverseResponse represents the complete response from AWS Bedrock Converse API.
//
// This structure contains Cohere Command R's response to a conversation request
// through the AWS Bedrock Converse API. It includes the generated message with
// enterprise-grade conversation quality, completion metadata, and usage statistics
// for comprehensive enterprise conversation management and cost tracking.
//
// Based on AWS Bedrock Converse API response format documentation.
type CohereConverseResponse struct {
	// Message contains the assistant's response with role and content information.
	// Features Cohere Command R's enterprise-grade conversation quality with
	// advanced contextual understanding, multi-lingual support, coherent dialogue
	// flow, and safety filtering applied to the generated content.
	Message struct {
		// Role identifies the message sender, typically "assistant" for Cohere Command R.
		// Maintains conversation context and indicates enterprise-grade generated content
		// with advanced conversation capabilities and safety filtering applied.
		Role string `json:"role"`

		// Content contains the response content as structured content blocks.
		// Delivers Cohere Command R's enterprise-quality conversation response
		// with coherent dialogue, contextual appropriateness, and multi-lingual support.
		Content []CohereConverseContentBlock `json:"content"`
	} `json:"message"`

	// StopReason indicates why Cohere Command R stopped generating tokens.
	// Valid values include "end_turn" (natural completion), "max_tokens" (limit reached),
	// "stop_sequence" (custom sequence encountered), and enterprise safety filtering reasons.
	StopReason string `json:"stopReason"`

	// Usage contains detailed token consumption statistics for the request.
	// Provides input, output, and total token counts for enterprise cost management
	// and performance monitoring of Cohere Command R conversation sessions.
	Usage CohereUsage `json:"usage"`
}

// CohereBedrockResponse represents the complete response from AWS Bedrock Cohere Command R models.
//
// This structure provides a comprehensive response format that matches the official
// AWS Bedrock Converse API structure for Cohere Command R models. It includes
// response metadata, generated content choices with enterprise-grade conversation
// quality, and detailed usage statistics for enterprise conversation management
// and cost tracking.
//
// Based on AWS Bedrock official Converse API response format documentation.
type CohereBedrockResponse struct {
	// Id provides a unique identifier for this specific response.
	// Used for request tracking, logging, and enterprise conversation session management
	// with Cohere Command R models through AWS Bedrock infrastructure.
	ID string `json:"id"`

	// Model identifies the specific Cohere Command R model used for generation.
	// Optional field that indicates which enterprise-grade model variant processed
	// the request, useful for model performance tracking and conversation analytics.
	Model string `json:"model,omitempty"`

	// Object specifies the response type, typically "chat.completion".
	// Maintains compatibility with standard chat completion APIs while providing
	// Cohere Command R's enterprise-grade conversation capabilities through AWS Bedrock.
	Object string `json:"object"`

	// Created represents the Unix timestamp when the response was generated.
	// Provides timing information for enterprise conversation analytics, performance
	// monitoring, and audit trails of Cohere Command R interactions.
	Created int64 `json:"created"`

	// Choices contains the response options generated by Cohere Command R.
	// Typically includes a single choice featuring enterprise-grade conversation quality
	// with advanced contextual understanding, multi-lingual support, and safety filtering.
	Choices []CohereBedrockChoice `json:"choices"`

	// Usage contains detailed token consumption statistics for cost management.
	// Provides comprehensive input, output, and total token counts for enterprise
	// cost tracking and performance monitoring of Cohere Command R conversations.
	Usage CohereUsage `json:"usage"`
}

// CohereBedrockChoice represents a single response choice from AWS Bedrock Cohere Command R.
//
// This structure contains individual response options generated by Cohere Command R
// models through AWS Bedrock. Each choice includes the generated message content
// with enterprise-grade conversation quality, completion metadata, and contextual
// information about the generation process and safety filtering results.
type CohereBedrockChoice struct {
	// Index identifies the position of this choice in the choices array.
	// Typically 0 for the primary (and usually only) choice, maintaining
	// compatibility with multi-choice response formats while delivering
	// Cohere Command R's focused enterprise-grade conversation quality.
	Index int `json:"index"`

	// Message contains the generated response content from Cohere Command R.
	// Features enterprise-grade conversation quality with advanced contextual
	// understanding, coherent dialogue flow, multi-lingual support, and
	// comprehensive safety filtering applied throughout the generation process.
	Message CohereBedrockMessage `json:"message"`

	// FinishReason indicates why Cohere Command R stopped generating content.
	// Valid values: "stop" (natural completion), "length" (token limit reached),
	// "content_filter" (safety filtering), and other enterprise-specific completion
	// reasons that provide insight into the generation termination process.
	FinishReason string `json:"finish_reason"`
}

// CohereBedrockMessage represents the message content in AWS Bedrock response format.
//
// This structure contains the actual conversation content generated by Cohere Command R
// through AWS Bedrock, formatted as structured content blocks. It maintains role
// information and delivers enterprise-grade conversation quality with advanced
// contextual understanding, coherent dialogue flow, and comprehensive safety filtering.
type CohereBedrockMessage struct {
	// Role identifies the message sender, typically "assistant" for Cohere Command R.
	// Maintains conversation context and indicates enterprise-grade generated content
	// with advanced conversation capabilities, multi-lingual support, and safety
	// filtering applied throughout the response generation process.
	Role string `json:"role"`

	// Content contains the response as an array of structured content blocks.
	// Delivers Cohere Command R's enterprise-quality conversation content with
	// coherent dialogue, contextual appropriateness, advanced multi-lingual support,
	// and comprehensive safety filtering applied to ensure appropriate responses.
	Content []CohereBedrockContentBlock `json:"content"`
}

// CohereBedrockContentBlock represents individual content elements in AWS Bedrock format.
//
// This structure contains specific content elements that compose the response message
// from Cohere Command R models through AWS Bedrock. Each content block represents
// a portion of the enterprise-grade conversation response with advanced contextual
// understanding, coherent text generation, and comprehensive safety filtering applied.
type CohereBedrockContentBlock struct {
	// Text contains the textual content of this block.
	// Represents a segment of Cohere Command R's enterprise-quality conversation
	// response with coherent dialogue generation, contextual appropriateness,
	// multi-lingual support, and safety filtering ensuring appropriate content.
	Text *string `json:"text,omitempty"`
}

// CohereBedrockStreamChoice represents individual streaming choices in AWS Bedrock format.
//
// This structure contains incremental content delivery from Cohere Command R models
// during streaming responses through AWS Bedrock. Each streaming choice provides
// progressive content with enterprise-grade conversation quality, maintaining
// coherent dialogue flow and contextual appropriateness throughout the stream.
type CohereBedrockStreamChoice struct {
	// Index identifies the position of this streaming choice in the choices array.
	// Typically 0 for the primary streaming choice, ensuring focused delivery
	// of Cohere Command R's enterprise-grade conversation content.
	Index int `json:"index"`

	// Delta contains the incremental content generated in this streaming chunk.
	// Provides progressive delivery of Cohere Command R's enterprise-quality
	// conversation response with coherent dialogue flow, contextual understanding,
	// and safety filtering applied to each incremental content piece.
	Delta CohereBedrockStreamMessage `json:"delta"`

	// FinishReason indicates completion status when streaming ends, if applicable.
	// Provides insight into why Cohere Command R completed generation, including
	// natural completion, token limits, or enterprise safety filtering outcomes.
	FinishReason *string `json:"finish_reason,omitempty"`
}

// CohereBedrockStreamMessage represents incremental message content during streaming.
//
// This structure contains the progressive content generated by Cohere Command R
// during streaming responses through AWS Bedrock. Each streaming message represents
// new content added to the conversation with enterprise-grade quality, featuring
// coherent dialogue generation, contextual understanding, and safety filtering.
type CohereBedrockStreamMessage struct {
	// Role identifies the sender for streaming content, typically "assistant".
	// Maintains conversation context during progressive delivery and indicates
	// enterprise-grade content generation from Cohere Command R with advanced
	// conversation capabilities and safety filtering applied.
	Role string `json:"role,omitempty"`

	// Content contains incremental content blocks delivered in this streaming chunk.
	// Provides progressive delivery of Cohere Command R's enterprise-quality
	// conversation response with coherent dialogue, contextual appropriateness,
	// and comprehensive safety filtering applied to streaming content.
	Content []CohereBedrockContentBlock `json:"content,omitempty"`
}

// --- Tool Calling Support Structures ---

// CohereTool represents a tool definition for Cohere Command R's advanced function calling capabilities.
//
// This structure defines individual tools that can be made available to Cohere Command R
// models through AWS Bedrock's Converse API. Each tool represents a function that the model
// can intelligently decide to invoke during conversation, enabling enterprise-grade
// automation, data retrieval, and interactive workflows with Cohere's advanced reasoning
// and contextual understanding capabilities.
//
// Based on AWS Bedrock Converse API tool specification format.
type CohereTool struct {
	// Type specifies the tool category, typically "function" for callable functions.
	// This field categorizes the tool for Cohere Command R's intelligent tool selection
	// process, ensuring appropriate invocation within enterprise conversation contexts
	// and maintaining compatibility with AWS Bedrock's tool calling infrastructure.
	Type string `json:"type"`

	// Function contains the detailed specification of the callable function.
	// Provides Cohere Command R with comprehensive function metadata including name,
	// description, and parameter schema for intelligent tool selection and invocation
	// within enterprise-grade conversation flows and automated workflows.
	Function CohereToolSpec `json:"function"`
}

// CohereToolSpec represents the specification of a tool function for Cohere Command R integration.
//
// This structure provides comprehensive metadata about a callable function that Cohere Command R
// can intelligently invoke through AWS Bedrock's Converse API. The specification enables
// the model to understand function capabilities, parameter requirements, and appropriate
// usage contexts for enterprise-grade tool calling with advanced reasoning and safety
// considerations applied throughout the invocation process.
type CohereToolSpec struct {
	// Name identifies the unique function name for tool invocation.
	// Used by Cohere Command R for precise tool selection and invocation within
	// enterprise conversation contexts, ensuring accurate function identification
	// and maintaining compatibility with AWS Bedrock's tool calling mechanisms.
	Name string `json:"name"`

	// Description provides human-readable explanation of the function's purpose and behavior.
	// Enables Cohere Command R's advanced reasoning capabilities to intelligently decide
	// when and how to invoke the tool within conversation context, supporting enterprise
	// automation workflows with contextual appropriateness and safety considerations.
	Description string `json:"description"`

	// Parameters defines the JSON schema for function input parameters.
	// Provides Cohere Command R with parameter structure, types, and constraints
	// for generating appropriate function calls with proper validation and type safety
	// within enterprise-grade tool calling workflows through AWS Bedrock integration.
	Parameters any `json:"parameters"`
}

// CohereToolCall represents a tool invocation made by Cohere Command R during conversation.
//
// This structure contains the details of a function call that Cohere Command R has decided
// to make during conversation processing through AWS Bedrock. Each tool call represents
// an intelligent decision by the model to invoke external functionality, featuring
// enterprise-grade reasoning, contextual appropriateness, and safety validation
// applied to the tool selection and parameter generation process.
type CohereToolCall struct {
	// ID provides a unique identifier for this specific tool call invocation.
	// Used for tracking and correlating tool calls with their corresponding results
	// in enterprise conversation flows, enabling proper response handling and
	// maintaining conversation context throughout the tool calling process.
	ID string `json:"id"`

	// Type specifies the tool call category, typically "function" for function invocations.
	// Indicates the nature of the tool call for proper processing and response handling
	// within Cohere Command R's enterprise conversation workflows and AWS Bedrock
	// tool calling infrastructure integration.
	Type string `json:"type"`

	// Function contains the specific function invocation details and generated parameters.
	// Includes the function name and arguments generated by Cohere Command R's advanced
	// reasoning capabilities, ensuring appropriate parameter values and maintaining
	// enterprise-grade accuracy and safety throughout the tool invocation process.
	Function CohereToolFunction `json:"function"`
}

// CohereToolFunction represents the function details in a Cohere Command R tool call.
//
// This structure contains the specific function invocation information generated by
// Cohere Command R during intelligent tool calling through AWS Bedrock. It includes
// the function identifier and generated arguments, demonstrating the model's
// enterprise-grade reasoning capabilities in parameter generation and contextual
// appropriateness for automated workflow integration and enterprise tool calling.
type CohereToolFunction struct {
	// Name identifies the specific function to be invoked by the tool call.
	// Corresponds to a function defined in the available tools list, enabling
	// precise function selection by Cohere Command R's intelligent reasoning
	// within enterprise conversation contexts and AWS Bedrock integration.
	Name string `json:"name"`

	// Arguments contains the JSON-encoded function parameters generated by the model.
	// Represents Cohere Command R's intelligent parameter generation based on
	// conversation context, function schema, and enterprise-grade reasoning
	// capabilities, ensuring appropriate values for successful tool invocation.
	Arguments string `json:"arguments"`
}

// --- OpenAI Compatibility Structures ---

// CohereResponseMessage represents an OpenAI-compatible message with comprehensive tool calling support.
//
// This structure provides OpenAI API compatibility for Cohere Command R responses processed
// through AWS Bedrock, enabling seamless integration with existing OpenAI-based applications
// while preserving Cohere's enterprise-grade conversation quality and advanced tool calling
// capabilities. The message format maintains full compatibility with OpenAI's chat completion
// API while delivering Cohere Command R's multi-lingual support and safety filtering.
//
// Based on OpenAI Chat Completions API message format with Cohere Command R enhancements.
type CohereResponseMessage struct {
	// Role identifies the message sender, typically "assistant" for Cohere Command R responses.
	// Maintains OpenAI API compatibility while indicating enterprise-grade content generation
	// from Cohere Command R with advanced conversation capabilities, contextual understanding,
	// and comprehensive safety filtering applied throughout the response generation.
	Role string `json:"role"`

	// Content contains the generated text response from Cohere Command R.
	// Delivers enterprise-quality conversation content with OpenAI API compatibility,
	// featuring Cohere's advanced multi-lingual support, contextual coherence,
	// and safety filtering while maintaining the expected OpenAI response structure.
	Content string `json:"content,omitempty"`

	// ToolCalls contains tool invocations made by Cohere Command R in OpenAI-compatible format.
	// Provides seamless OpenAI API compatibility for tool calling functionality while
	// preserving Cohere Command R's intelligent tool selection and parameter generation
	// capabilities within enterprise-grade conversation workflows.
	ToolCalls []CohereToolCallResponse `json:"tool_calls,omitempty"`
}

// CohereToolCallResponse represents a tool call in OpenAI-compatible format for seamless integration.
//
// This structure converts Cohere Command R's intelligent tool calling decisions into
// OpenAI-compatible format, enabling existing OpenAI-based applications to seamlessly
// integrate with Cohere's enterprise-grade tool calling capabilities through AWS Bedrock.
// Maintains full compatibility with OpenAI's tool calling API while preserving Cohere's
// advanced reasoning and contextual appropriateness in tool selection and invocation.
type CohereToolCallResponse struct {
	// ID provides the unique identifier for this tool call, maintaining OpenAI compatibility.
	// Enables proper tool call tracking and correlation with results in existing
	// OpenAI-based applications while preserving Cohere Command R's enterprise-grade
	// tool calling workflow management and conversation context handling.
	ID string `json:"id"`

	// Type specifies the tool call category in OpenAI-compatible format, typically "function".
	// Maintains compatibility with OpenAI's tool calling API structure while indicating
	// Cohere Command R's intelligent function invocation within enterprise conversation
	// workflows and AWS Bedrock integration capabilities.
	Type string `json:"type"`

	// Function contains the specific function details generated by Cohere Command R.
	// Provides OpenAI-compatible function invocation information while preserving
	// Cohere's enterprise-grade parameter generation, contextual reasoning, and
	// intelligent tool selection capabilities for seamless application integration.
	Function CohereToolFunction `json:"function"`
}

// CohereResponseChoice represents an OpenAI-compatible choice with comprehensive tool calling support.
//
// This structure provides individual response options from Cohere Command R in OpenAI-compatible
// format, enabling seamless integration with existing applications while preserving enterprise-grade
// conversation quality. Each choice represents Cohere's advanced reasoning capabilities, contextual
// understanding, and safety filtering delivered through AWS Bedrock with full OpenAI API
// compatibility for tool calling and standard conversation workflows.
type CohereResponseChoice struct {
	// Index identifies the position of this choice in the choices array for OpenAI compatibility.
	// Typically 0 for the primary choice, maintaining OpenAI API structure while delivering
	// Cohere Command R's focused enterprise-grade conversation quality and intelligent
	// tool calling capabilities through AWS Bedrock integration.
	Index int `json:"index"`

	// Message contains the response content and tool calls from Cohere Command R.
	// Delivers enterprise-quality conversation content in OpenAI-compatible format,
	// featuring Cohere's advanced multi-lingual support, contextual coherence,
	// intelligent tool calling, and comprehensive safety filtering capabilities.
	Message CohereResponseMessage `json:"message"`

	// FinishReason indicates why Cohere Command R stopped generating content in OpenAI format.
	// Provides completion status information compatible with OpenAI API expectations
	// while reflecting Cohere's enterprise-grade generation logic, safety filtering
	// outcomes, and intelligent conversation completion decisions.
	FinishReason string `json:"finish_reason"`
}

// CohereResponse represents the complete OpenAI-compatible response with enterprise Cohere capabilities.
//
// This structure provides full OpenAI Chat Completions API compatibility for Cohere Command R
// responses processed through AWS Bedrock, enabling seamless integration with existing
// applications while preserving all of Cohere's enterprise-grade features including advanced
// tool calling, multi-lingual support, contextual understanding, and comprehensive safety
// filtering. The response maintains OpenAI format while delivering superior conversation quality.
//
// Based on OpenAI Chat Completions API response format with Cohere Command R enhancements.
type CohereResponse struct {
	// ID provides a unique identifier for this response in OpenAI-compatible format.
	// Enables proper response tracking and correlation in existing applications while
	// maintaining enterprise-grade conversation session management and audit capabilities
	// for Cohere Command R interactions through AWS Bedrock infrastructure.
	ID string `json:"id"`

	// Object specifies the response type, maintaining OpenAI API compatibility.
	// Typically "chat.completion" to indicate chat completion response format
	// while delivering Cohere Command R's enterprise-grade conversation capabilities
	// and advanced tool calling features through AWS Bedrock integration.
	Object string `json:"object"`

	// Created represents the Unix timestamp when the response was generated for OpenAI compatibility.
	// Provides timing information in standard OpenAI format while enabling enterprise
	// conversation analytics, performance monitoring, and audit trails for Cohere
	// Command R interactions and tool calling workflows.
	Created int64 `json:"created"`

	// Model identifies the specific Cohere model used, maintaining OpenAI API compatibility.
	// Indicates which Cohere Command R variant processed the request while preserving
	// OpenAI format expectations for model identification in enterprise applications
	// and conversation analytics workflows.
	Model string `json:"model"`

	// Choices contains the response options from Cohere Command R in OpenAI-compatible format.
	// Delivers enterprise-grade conversation choices with advanced tool calling support,
	// multi-lingual capabilities, contextual understanding, and safety filtering
	// while maintaining full compatibility with existing OpenAI-based applications.
	Choices []CohereResponseChoice `json:"choices"`

	// Usage contains detailed token consumption statistics in OpenAI-compatible format (prompt_tokens, completion_tokens, total_tokens).
	// Matches the project's unified Usage struct to ensure consistent billing, logging, and client compatibility.
	Usage relaymodel.Usage `json:"usage"`
}
